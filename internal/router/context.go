package router

import (
	"context"

	"github.com/siyoga/rollstory/internal/config"
	"github.com/siyoga/rollstory/internal/domain"
	"github.com/siyoga/rollstory/internal/service"
)

type (
	contextHandler struct {
		timeouts config.Timeouts
		service  service.ContextService
	}
)

func NewContextHandler(
	timeouts config.Timeouts,
	ctxService service.ContextService,
) Handler {
	return &contextHandler{
		timeouts: timeouts,
		service:  ctxService,
	}
}

func (c *contextHandler) FillHandlers(r Router) {
	r.Handle("start", c.start).AddButton(
		createButton("üôéüèª‚Äç‚ôÇÔ∏è–ü–µ—Ä—Å–æ–Ω–∞–∂"),
		createButton("üåç–ò–≥—Ä–æ–≤–∞—è –≤—Å–µ–ª–µ–Ω–Ω–∞—è"),
	)
	r.Handle("character", c.character)
	r.Handle("world", c.world)
	r.Handle("begin", c.begin)
}

func (c *contextHandler) start(ctx context.Context, userId int64, msg domain.Message) response {
	var cancel func()
	ctx, cancel = context.WithTimeout(ctx, c.timeouts.RequestTimeout)
	defer cancel()

	res, e := c.service.CreateThreadAndSendInstruction(ctx, userId)
	if e != nil {
		return newErrResponse(e, userId)
	}

	return newSuccessResponse(
		domain.Message{
			Text:   res,
			ChatId: msg.ChatId,
		},
		201,
		&userId,
	)
}

func (c *contextHandler) character(ctx context.Context, userId int64, msg domain.Message) response {
	var cancel func()
	ctx, cancel = context.WithTimeout(ctx, c.timeouts.RequestTimeout)
	defer cancel()

	if msg.Command != nil {
		return newSuccessResponse(
			domain.Message{
				Text: "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –ø–æ –ø—É–Ω–∫—Ç–∞–º: \n" +
					"1. –í–Ω–µ—à–Ω–æ—Å—Ç—å\n" +
					"2. –•–∞—Ä–∞–∫—Ç–µ—Ä\n" +
					"3. –ö—Ä–∞—Ç–∫–∞—è –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è, –µ–≥–æ —Ü–µ–ª–∏, –º–æ—Ç–∏–≤–∞—Ü–∏—è\n" +
					"4. –ò–º—è\n" +
					"5. –ö–ª—é—á–µ–≤—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏/–≥—Ä—É–ø–ø—ã –ª—é–¥–µ–π (–≤—Ä–∞–≥–∏, —Å–æ—é–∑–Ω–∏–∫–∏, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ)",
				ChatId: msg.ChatId,
			},
			200,
			nil,
		)
	}

	res, e := c.service.CreateCharacter(ctx, userId, msg.Text)
	if e != nil {
		return newErrResponse(e, userId)
	}

	return newSuccessResponse(
		domain.Message{
			Text:   res,
			ChatId: msg.ChatId,
		},
		200,
		&userId,
	)
}

func (c *contextHandler) world(ctx context.Context, userId int64, msg domain.Message) response {
	var cancel func()
	ctx, cancel = context.WithTimeout(ctx, c.timeouts.RequestTimeout)
	defer cancel()

	if msg.Command != nil {
		return newSuccessResponse(
			domain.Message{
				Text: "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∂–∞–Ω—Ä –≤—Å–µ–ª–µ–Ω–Ω–æ–π –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∏–≥—Ä–∞—Ç—å," +
					" —á–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ–µ, —Ç–µ–º –ª—É—á—à–µ –±—É–¥–µ—Ç –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –æ–ø—ã—Ç",
				ChatId: msg.ChatId,
			},
			200,
			nil,
		)
	}

	res, e := c.service.CreateWorld(ctx, userId, msg.Text)
	if e != nil {
		return newErrResponse(e, userId)
	}

	return newSuccessResponse(
		domain.Message{
			Text:   res,
			ChatId: msg.ChatId,
		},
		200,
		&userId,
	)
}

func (c *contextHandler) begin(ctx context.Context, userId int64, msg domain.Message) response {
	var cancel func()
	ctx, cancel = context.WithTimeout(ctx, c.timeouts.RequestTimeout)
	defer cancel()

	res, e := c.service.BeginStory(ctx, userId)
	if e != nil {
		return newErrResponse(e, userId)
	}

	return newSuccessResponse(
		domain.Message{
			Text:   res,
			ChatId: msg.ChatId,
		},
		200,
		&userId,
	)
}
